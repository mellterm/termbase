class Group < ActiveRecord::Base
  attr_accessible :type, :name, :access_code

  has_many :memberships
  has_many :users, :through => :memberships
  
  has_many :translations
  
  has_many :authorities, :as => :authoritable
  
  accepts_nested_attributes_for :translations
  
  before_save :generate_access_code
  
  def has_access_code?(submitted_access_code)
    encrypted_access_code == encrypt(submitted_access_code)
  end
  
  def self.authenticate(name, submitted_access_code)
    group = find_by_name(name)
    return nil if group.nil?
    return group if group.has_access_code?(submitted_access_code)
  end
  
  private
  
     def generate_access_code
       begin
         self.access_code = SecureRandom.hex(3)
       end while self.class.exists?(access_code: access_code)
    end
        
  
end
#--
# generated by 'annotated-rails' gem, please do not remove this line and content below, instead use `bundle exec annotate-rails -d` command
#++
# Table name: groups
#
# * id          :integer         not null
#   group_type  :string(255)
#   created_at  :datetime        not null
#   updated_at  :datetime        not null
#   name        :string(255)
#   access_code :string(255)
#--
# generated by 'annotated-rails' gem, please do not remove this line and content above, instead use `bundle exec annotate-rails -d` command
#++
